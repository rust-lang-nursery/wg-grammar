Pat =
  | Wild:"_"
  | Rest:".."
  | Literal:{ minus:"-"? lit:LITERAL }
  // unstable(exclusive_range_pattern):
  | Range:{
    | start:PatRangeValue ".." end:PatRangeValue
    // unstable(half_open_range_patterns):
    | start:PatRangeValue ".." | ".." end:PatRangeValue
  }
  | RangeInclusive:{
    | start:PatRangeValue { "..." | "..=" } end:PatRangeValue
    // unstable(half_open_range_patterns):
    | { "..." | "..=" } end:PatRangeValue
  }
  | Binding:{ binding:Binding { "@" subpat:Pat }? }
  | Paren:{ "(" pat:Pat ")" }
  | Ref:{ "&" mutable:"mut"? pat:Pat }
  // unstable(box_patterns):
  | Box:{ "box" pat:Pat }
  // unstable(or_patterns):
  // FIXME(eddyb) find a way to express "2 or more" (like regex `{2,}`).
  | Or:{ first_pat:Pat "|" pats:Pat+ % "|" }
  | Slice:{ "[" elems:Pat* %% "," "]" }
  | Tuple:{ "(" fields:Pat* %% "," ")" }
  | Path:QPath
  | TupleStruct:{ path:Path "(" fields:Pat* %% "," ")" }
  | Struct:{ path:Path "{" fields:StructPatFieldsAndEllipsis "}" }
  | MacroCall:MacroCall
  ;

PatRangeValue =
  | Literal:{ minus:"-"? lit:LITERAL }
  | Path:QPath
  ;

Binding = boxed:"box"? reference:"ref"? mutable:"mut"? name:IDENT;

// FIXME(eddyb) find a way to express this `A* B?` pattern better
StructPatFieldsAndEllipsis =
  | Fields:StructPatField* %% ","
  | Ellipsis:{ ".." }
  | FieldsAndEllipsis:{ fields:StructPatField+ % "," "," ".." }
  ;

StructPatField = attrs:OuterAttr* kind:StructPatFieldKind;
StructPatFieldKind =
  | Shorthand:Binding
  | Explicit:{ field:FieldName ":" pat:Pat }
  ;
